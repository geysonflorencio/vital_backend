// index.js - Servidor principal refatorado
require('dotenv').config();

const { createServer } = require('./config/server');
const apiRoutes = require('./routes');
const { errorHandler, notFoundHandler } = require('./middleware/errorHandler');
const { debugLogger } = require('./middleware/logger');

// Verificar variáveis de ambiente obrigatórias
const requiredEnvVars = ['SUPABASE_URL', 'SUPABASE_SERVICE_ROLE_KEY'];
const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingEnvVars.length > 0) {
  console.error('❌ Variáveis de ambiente obrigatórias não configuradas:', missingEnvVars);
  process.exit(1);
}

// Criar servidor
const { app, authLimiter } = createServer();

// Rota raiz - Landing page da API
app.get('/', (req, res) => {
  // Se há parâmetros de query relacionados a auth, provavelmente é um redirecionamento incorreto
  if (req.query.token || req.query.email || req.url.includes('type=')) {
    const frontendUrl = process.env.FRONTEND_URL || 'https://vital-deploy.vercel.app';
    const redirectUrl = `${frontendUrl}/definir-senha.html${req.url.includes('?') ? req.url.substring(req.url.indexOf('?')) : ''}`;
    
    console.log('🔄 Redirecionamento automático da raiz para:', redirectUrl);
    return res.redirect(302, redirectUrl);
  }

  res.json({
    message: '🚀 VITAL API - Sistema de Triagem Hospitalar',
    status: 'online',
    version: '2.0.0',
    timestamp: new Date().toISOString(),
    endpoints: {
      health: '/api/health',
      auth: '/api/cadastrar-usuario',
      solicitacoes: '/api/solicitacoes'
    },
    documentation: 'https://vital-deploy.onrender.com/api',
    note: 'Se você está tentando definir uma senha, acesse: https://vital-deploy.vercel.app/definir-senha.html'
  });
});

// Rota de emergência para redirecionamento de senhas
app.get('/definir-senha', (req, res) => {
  // Redirecionar para o frontend correto (nova página)
  const frontendUrl = process.env.FRONTEND_URL || 'https://vital-deploy.vercel.app';
  const redirectUrl = `${frontendUrl}/cadastro-senha.html${req.url.includes('?') ? req.url.substring(req.url.indexOf('?')) : ''}`;
  
  console.log('🔄 Redirecionamento de emergência:', redirectUrl);
  res.redirect(302, redirectUrl);
});

// Rota adicional para capturar /api/definir-senha-inicial via GET
app.get('/api/definir-senha-inicial', (req, res) => {
  // Redirecionar para o frontend correto (nova página)
  const frontendUrl = process.env.FRONTEND_URL || 'https://vital-deploy.vercel.app';
  const redirectUrl = `${frontendUrl}/cadastro-senha.html${req.url.includes('?') ? req.url.substring(req.url.indexOf('?')) : ''}`;
  
  console.log('🔄 Redirecionamento API definir-senha-inicial:', redirectUrl);
  res.redirect(302, redirectUrl);
});

// Rotas da API
app.use('/api', apiRoutes);

// Rotas legadas (compatibilidade com código antigo)
const authRoutes = require('./routes/auth');
app.use('/api', authRoutes); // Mantém rotas diretas como /api/cadastrar-usuario

// Middleware de erro 404
app.use(notFoundHandler);

// Middleware de tratamento de erros
app.use(errorHandler);

// Configuração do servidor
const PORT = process.env.PORT || 3001;

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`🚀 Servidor VITAL iniciado`, {
    port: PORT,
    environment: process.env.NODE_ENV || 'development',
    timestamp: new Date().toISOString()
  });

  // Log das rotas disponíveis
  console.log('📋 Rotas disponíveis', {
    routes: [
      `GET http://localhost:${PORT}/api/health`,
      `POST http://localhost:${PORT}/api/cadastrar-usuario`,
      `POST http://localhost:${PORT}/api/definir-senha-inicial`,
      `GET http://localhost:${PORT}/api/usuarios`,
      `DELETE http://localhost:${PORT}/api/excluir-usuario`,
      `POST http://localhost:${PORT}/api/solicitacoes`,
      `GET http://localhost:${PORT}/api/solicitacoes`
    ]
  });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('🛑 Servidor recebeu SIGTERM, encerrando graciosamente...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('🛑 Servidor recebeu SIGINT, encerrando graciosamente...');
  process.exit(0);
});

// Capturar erros não tratados
process.on('uncaughtException', (error) => {
  console.error('❌ Erro não capturado', {
    error: error.message,
    stack: error.stack
  });
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('❌ Promise rejeitada não tratada', {
    reason: reason,
    promise: promise
  });
  process.exit(1);
});
